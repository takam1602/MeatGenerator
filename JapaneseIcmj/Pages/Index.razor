@page "/"
@using OpenCvSharp
@inject IJSRuntime jsRuntime;

<PageTitle>Meat Generator　2.0 </PageTitle>
    
<h1>Meat Generator 2.0</h1>

<p>
    ジャッジングの練習用に，
    <a href="/meatGenerator" target="_blank">
    疑似ロース芯画像
    </a>
    や
    <a href="/carcaseGenerator" target="_blank">
    枝肉画像
    </a>
    を生成します．
</p>

<h2>How to use</h2>
<p>
    Generateボタンを押して問題をつくり，観察して自分の答えを入力し，Answerボタンで答えを確認します．
</p>

<p>
    ロース芯画像がフィルター処理で，枝肉画像は学習データから推定した正規分布から，「それっぽい」画像の出力を追求しています．
</p>

<h2>困ったら</h2>
<p>
    問題の報告，修正依頼は
    <a href="https://github.com/takam1602/MeatGenerator" target="_blank">このリポジトリ</a>
    でIssuesから連絡ください
</p>

<p>
    shimatさんのサンプルに助けてもらいました．
</p>
<a href="https://github.com/shimat/opencvsharp_blazor_sample" target="_blank">
    <canvas @ref="canvasElements" width="64" height="64">
    </canvas>
</a>

@code {
    private ElementReference canvasElements;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        var imageBytes = new byte[64 * 64 * 4];
        unsafe
        {
            fixed (byte* pImageBytes = imageBytes)
            {
                var p = pImageBytes;
                for (int y = 0; y < 64; y++)
                {
                    for (int x = 0; x < 64; x++)
                    {
                        var xp = (byte)(x / 64.0 * 255);
                        var yp = (byte)(y / 64.0 * 255);

                        *(p++) = xp; // R
                        *(p++) = yp; // G
                        *(p++) = (byte)(255 - xp); // B
                        *(p++) = 255; // A
                    }
                }
            }
        }

        var canvasClients = new CanvasClient(jsRuntime, canvasElements);
        await canvasClients.DrawPixelsAsync(imageBytes);
    }
}
