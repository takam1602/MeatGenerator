@page "/rAndPViewer"
@using OpenCvSharp
@using OpenCvSharp.Extensions
@using System.Diagnostics
@using System.Text
@using System.IO
@using JapaneseIcmj
@inject IJSRuntime jsRuntime;
@inject HttpClient httpClient;
@implements IDisposable

<PageTitle>Retail vs Primal</PageTitle>

<h1>Retail or Primal Cut Viewer V0.1 (test)</h1>

<p>
    精肉や部分肉の画像 *1 を表示します．
    問題の画像はラベル文字を消去した画像で，正解は処理前の画像です．
</p>

<p>...としたかったのですが，アルゴリズムが不十分できれいに消せていません．そもそも，正解の画像から答えが読み取れないものが多いです．改善中です．
    </p>

<div>
    <button @onclick="@(async () => await Next())">Next</button>
    <button @onclick="@(async () => await Answer())">Answer</button>
</div>

<div>
    <canvas @ref="srcCanvas" width="640" height="480" style="border:1px solid gray;">
        Your browser does not support the HTML5 canvas tag.
    </canvas>
    <canvas @ref="dstCanvas" width="640" height="480" style="border:1px solid gray;">
        Your browser does not support the HTML5 canvas tag.
    </canvas>
</div>
<p>Mihae 写真コレクションから写真をお借りしています．</p>
@code {
    private Mat? srcMat;
    private ElementReference srcCanvas;
    private ElementReference dstCanvas;
    private CanvasClient? srcCanvasClient;
    private CanvasClient? dstCanvasClient;
    private KOpenCvSharp conv = new();

    public void Dispose()
    {
        srcMat?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (!firstRender)
        //    return;
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Next()
    {
        var rnd = new Random();
        var b = rnd.Next(0, 255);
        string imgSrc = "images/" + b + ".bmp";

        var s = await httpClient.GetByteArrayAsync(imgSrc);
        var n = Convert.ToBase64String(s);
        var imageBytes = Convert.FromBase64String(n);
        Mat smat = new Mat();
        try
        {
            smat = Cv2.ImDecode(imageBytes, ImreadModes.Color);
        }
        catch (Exception e)
        {

        }

        srcCanvasClient ??= new CanvasClient(jsRuntime, srcCanvas);
        dstCanvasClient ??= new CanvasClient(jsRuntime, dstCanvas);

        var grayMat = conv.BGR2Gray(smat);
        Mat dstMat = new();

        srcMat = conv.ResizeNearest(smat, 480, 640);
        dstMat = conv.Black2White(smat, 40, 150);
        dstMat = conv.ResizeNearest(dstMat, 480, 640);

        await srcCanvasClient.DrawMatAsync(dstMat);
    }

    private async Task Answer()
    {
        if (srcMat is null)
            throw new InvalidOperationException($"{nameof(srcMat)} is null");
        if (dstCanvasClient is null)
            throw new InvalidOperationException($"{nameof(dstCanvasClient)} is null");

        await dstCanvasClient.DrawMatAsync(srcMat);
    }
}
